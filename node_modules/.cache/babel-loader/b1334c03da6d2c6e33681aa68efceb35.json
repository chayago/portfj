{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\HP ELITEBOOK\\\\Desktop\\\\winXP-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"C:\\\\Users\\\\HP ELITEBOOK\\\\Desktop\\\\winXP-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\HP ELITEBOOK\\\\Desktop\\\\winXP-master\\\\src\\\\WinXP\\\\apps\\\\Notepad\\\\index.js\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  flex: auto;\\n  outline: none;\\n  font-family: 'Lucida Console', monospace;\\n  font-size: 13px;\\n  line-height: 14px;\\n  resize: none;\\n  padding: 2px;\\n  \", \"\\n  overflow-y: scroll;\\n  border: 1px solid #96abff;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 100%;\\n  background: linear-gradient(to right, #edede5 0%, #ede8cd 100%);\\n  display: flex;\\n  flex-direction: column;\\n  align-items: stretch;\\n  .np__toolbar {\\n    position: relative;\\n    height: 21px;\\n    flex-shrink: 0;\\n    border-bottom: 1px solid white;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { WindowDropDowns } from 'src/components';\nimport dropDownData from './dropDownData';\nexport default function Notepad(_ref) {\n  var onClose = _ref.onClose;\n\n  var _useState = useState('img src=\"ff\"'),\n      _useState2 = _slicedToArray(_useState, 2),\n      docText = _useState2[0],\n      setDocText = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      wordWrap = _useState4[0],\n      setWordWrap = _useState4[1];\n\n  function onClickOptionItem(item) {\n    switch (item) {\n      case 'Exit':\n        onClose();\n        break;\n\n      case 'Word Wrap':\n        setWordWrap(!wordWrap);\n        break;\n\n      case 'Time/Date':\n        var date = new Date();\n        setDocText(\"\".concat(docText).concat(date.toLocaleTimeString(), \" \").concat(date.toLocaleDateString()));\n        break;\n\n      default:\n    }\n  }\n\n  function onTextAreaKeyDown(e) {\n    // handle tabs in text area\n    if (e.which === 9) {\n      e.preventDefault();\n      e.persist();\n      var start = e.target.selectionStart;\n      var end = e.target.selectionEnd;\n      setDocText(\"\".concat(docText.substring(0, start), \"\\t\").concat(docText.substring(end)));\n      requestAnimationFrame(function () {\n        e.target.selectionStart = start + 1;\n        e.target.selectionEnd = start + 1;\n      });\n    }\n  }\n\n  return React.createElement(Div, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"section\", {\n    className: \"np__toolbar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(WindowDropDowns, {\n    items: dropDownData,\n    onClickItem: onClickOptionItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(StyledTextarea, {\n    wordWrap: wordWrap,\n    value: docText,\n    onChange: function onChange(e) {\n      return setDocText(e.target.value);\n    },\n    onKeyDown: onTextAreaKeyDown,\n    spellCheck: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }));\n}\nvar Div = styled.div(_templateObject());\nvar StyledTextarea = styled.textarea(_templateObject2(), function (props) {\n  return props.wordWrap ? '' : 'white-space: nowrap; overflow-x: scroll;';\n});","map":{"version":3,"sources":["C:\\Users\\HP ELITEBOOK\\Desktop\\winXP-master\\src\\WinXP\\apps\\Notepad\\index.js"],"names":["React","useState","styled","WindowDropDowns","dropDownData","Notepad","onClose","docText","setDocText","wordWrap","setWordWrap","onClickOptionItem","item","date","Date","toLocaleTimeString","toLocaleDateString","onTextAreaKeyDown","e","which","preventDefault","persist","start","target","selectionStart","end","selectionEnd","substring","requestAnimationFrame","value","Div","div","StyledTextarea","textarea","props"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,eAAT,QAAgC,gBAAhC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,eAAe,SAASC,OAAT,OAA8B;AAAA,MAAXC,OAAW,QAAXA,OAAW;;AAAA,kBACbL,QAAQ,CAAC,cAAD,CADK;AAAA;AAAA,MACpCM,OADoC;AAAA,MAC3BC,UAD2B;;AAAA,mBAEXP,QAAQ,CAAC,KAAD,CAFG;AAAA;AAAA,MAEpCQ,QAFoC;AAAA,MAE1BC,WAF0B;;AAI3C,WAASC,iBAAT,CAA2BC,IAA3B,EAAiC;AAC/B,YAAQA,IAAR;AACE,WAAK,MAAL;AACEN,QAAAA,OAAO;AACP;;AACF,WAAK,WAAL;AACEI,QAAAA,WAAW,CAAC,CAACD,QAAF,CAAX;AACA;;AACF,WAAK,WAAL;AACE,YAAMI,IAAI,GAAG,IAAIC,IAAJ,EAAb;AACAN,QAAAA,UAAU,WACLD,OADK,SACKM,IAAI,CAACE,kBAAL,EADL,cACkCF,IAAI,CAACG,kBAAL,EADlC,EAAV;AAGA;;AACF;AAbF;AAeD;;AACD,WAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAC5B;AACA,QAAIA,CAAC,CAACC,KAAF,KAAY,CAAhB,EAAmB;AACjBD,MAAAA,CAAC,CAACE,cAAF;AACAF,MAAAA,CAAC,CAACG,OAAF;AACA,UAAIC,KAAK,GAAGJ,CAAC,CAACK,MAAF,CAASC,cAArB;AACA,UAAIC,GAAG,GAAGP,CAAC,CAACK,MAAF,CAASG,YAAnB;AACAlB,MAAAA,UAAU,WAAID,OAAO,CAACoB,SAAR,CAAkB,CAAlB,EAAqBL,KAArB,CAAJ,eAAoCf,OAAO,CAACoB,SAAR,CAAkBF,GAAlB,CAApC,EAAV;AAEAG,MAAAA,qBAAqB,CAAC,YAAM;AAC1BV,QAAAA,CAAC,CAACK,MAAF,CAASC,cAAT,GAA0BF,KAAK,GAAG,CAAlC;AACAJ,QAAAA,CAAC,CAACK,MAAF,CAASG,YAAT,GAAwBJ,KAAK,GAAG,CAAhC;AACD,OAHoB,CAArB;AAID;AACF;;AAED,SACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAS,IAAA,SAAS,EAAC,aAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAElB,YAAxB;AAAsC,IAAA,WAAW,EAAEO,iBAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIE,oBAAC,cAAD;AACE,IAAA,QAAQ,EAAEF,QADZ;AAEE,IAAA,KAAK,EAAEF,OAFT;AAGE,IAAA,QAAQ,EAAE,kBAAAW,CAAC;AAAA,aAAIV,UAAU,CAACU,CAAC,CAACK,MAAF,CAASM,KAAV,CAAd;AAAA,KAHb;AAIE,IAAA,SAAS,EAAEZ,iBAJb;AAKE,IAAA,UAAU,EAAE,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,CADF;AAcD;AAED,IAAMa,GAAG,GAAG5B,MAAM,CAAC6B,GAAV,mBAAT;AAcA,IAAMC,cAAc,GAAG9B,MAAM,CAAC+B,QAAV,qBAQhB,UAAAC,KAAK;AAAA,SAAKA,KAAK,CAACzB,QAAN,GAAiB,EAAjB,GAAsB,0CAA3B;AAAA,CARW,CAApB","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\n\nimport { WindowDropDowns } from 'src/components';\nimport dropDownData from './dropDownData';\n\nexport default function Notepad({ onClose }) {\n  const [docText, setDocText] = useState('img src=\"ff\"');\n  const [wordWrap, setWordWrap] = useState(false);\n\n  function onClickOptionItem(item) {\n    switch (item) {\n      case 'Exit':\n        onClose();\n        break;\n      case 'Word Wrap':\n        setWordWrap(!wordWrap);\n        break;\n      case 'Time/Date':\n        const date = new Date();\n        setDocText(\n          `${docText}${date.toLocaleTimeString()} ${date.toLocaleDateString()}`,\n        );\n        break;\n      default:\n    }\n  }\n  function onTextAreaKeyDown(e) {\n    // handle tabs in text area\n    if (e.which === 9) {\n      e.preventDefault();\n      e.persist();\n      var start = e.target.selectionStart;\n      var end = e.target.selectionEnd;\n      setDocText(`${docText.substring(0, start)}\\t${docText.substring(end)}`);\n\n      requestAnimationFrame(() => {\n        e.target.selectionStart = start + 1;\n        e.target.selectionEnd = start + 1;\n      });\n    }\n  }\n\n  return (\n    <Div>\n      <section className=\"np__toolbar\">\n        <WindowDropDowns items={dropDownData} onClickItem={onClickOptionItem} />\n      </section>\n      <StyledTextarea\n        wordWrap={wordWrap}\n        value={docText}\n        onChange={e => setDocText(e.target.value)}\n        onKeyDown={onTextAreaKeyDown}\n        spellCheck={false}\n      />\n    </Div>\n  );\n}\n\nconst Div = styled.div`\n  height: 100%;\n  background: linear-gradient(to right, #edede5 0%, #ede8cd 100%);\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  .np__toolbar {\n    position: relative;\n    height: 21px;\n    flex-shrink: 0;\n    border-bottom: 1px solid white;\n  }\n`;\n\nconst StyledTextarea = styled.textarea`\n  flex: auto;\n  outline: none;\n  font-family: 'Lucida Console', monospace;\n  font-size: 13px;\n  line-height: 14px;\n  resize: none;\n  padding: 2px;\n  ${props => (props.wordWrap ? '' : 'white-space: nowrap; overflow-x: scroll;')}\n  overflow-y: scroll;\n  border: 1px solid #96abff;\n`;\n"]},"metadata":{},"sourceType":"module"}